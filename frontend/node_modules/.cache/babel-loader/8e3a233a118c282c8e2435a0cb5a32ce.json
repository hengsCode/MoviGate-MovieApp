{"ast":null,"code":"import _regeneratorRuntime from\"A:/GITHUB/Projects/movie-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"A:/GITHUB/Projects/movie-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"A:/GITHUB/Projects/movie-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{CircularProgress}from\"@material-ui/core\";import{React,useEffect,useState}from\"react\";import{MovieGridView}from\"../../components/MoviesPage\";import\"./styles.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Movies=function Movies(props){var filter=props.history.location.state.filter;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movieList=_useState2[0],setMovieList=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];var type=filter;if(type===\"comingsoon\"){type=\"coming soon\";}else if(type.includes(\"search/\")){type=\"results for \\\"\".concat(type.substring(7),\"\\\":\");}useEffect(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var id;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setLoading(true);_context.next=3;return fetch(\"/\".concat(filter)).then(function(response){return response.json();}).then(function(_ref2){var results=_ref2.results;setMovieList(results);});case 3:id=setTimeout(function(){setLoading(false);},1000);return _context.abrupt(\"return\",function(){clearTimeout(id);});case 5:case\"end\":return _context.stop();}}},_callee);})),[filter]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"movie-page-container\",children:loading?/*#__PURE__*/_jsx(CircularProgress,{class:\"progress-icon\"}):/*#__PURE__*/_jsx(MovieGridView,{movieList:movieList,type:type})})});};export default Movies;","map":{"version":3,"sources":["A:/GITHUB/Projects/movie-app/frontend/src/pages/Movies/index.js"],"names":["CircularProgress","React","useEffect","useState","MovieGridView","Movies","props","filter","history","location","state","movieList","setMovieList","loading","setLoading","type","includes","substring","fetch","then","response","json","results","id","setTimeout","clearTimeout"],"mappings":"idAAA,OAASA,gBAAT,KAAiC,mBAAjC,CACA,OAASC,KAAT,CAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,aAAT,KAA8B,6BAA9B,CACA,MAAO,cAAP,C,gGAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAW,IAChBC,CAAAA,MADgB,CACLD,KAAK,CAACE,OAAN,CAAcC,QAAd,CAAuBC,KADlB,CAChBH,MADgB,eAEUJ,QAAQ,CAAC,EAAD,CAFlB,wCAEjBQ,SAFiB,eAENC,YAFM,8BAGMT,QAAQ,CAAC,IAAD,CAHd,yCAGjBU,OAHiB,eAGRC,UAHQ,eAKxB,GAAIC,CAAAA,IAAI,CAAGR,MAAX,CACA,GAAIQ,IAAI,GAAK,YAAb,CAA2B,CACzBA,IAAI,CAAG,aAAP,CACD,CAFD,IAEO,IAAIA,IAAI,CAACC,QAAL,CAAc,SAAd,CAAJ,CAA8B,CACnCD,IAAI,yBAAmBA,IAAI,CAACE,SAAL,CAAe,CAAf,CAAnB,OAAJ,CACD,CAEDf,SAAS,sEAAC,0IACRY,UAAU,CAAC,IAAD,CAAV,CADQ,sBAEFI,CAAAA,KAAK,YAAKX,MAAL,EAAL,CACHY,IADG,CACE,SAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EADF,EAEHF,IAFG,CAEE,eAAiB,IAAdG,CAAAA,OAAc,OAAdA,OAAc,CACrBV,YAAY,CAACU,OAAD,CAAZ,CACD,CAJG,CAFE,QAOJC,EAPI,CAOCC,UAAU,CAAC,UAAM,CACxBV,UAAU,CAAC,KAAD,CAAV,CACD,CAFkB,CAEhB,IAFgB,CAPX,iCAUD,UAAM,CACXW,YAAY,CAACF,EAAD,CAAZ,CACD,CAZO,wDAAD,GAaN,CAAChB,MAAD,CAbM,CAAT,CAeA,mBACE,sCACE,YAAK,SAAS,CAAC,sBAAf,UACGM,OAAO,cACN,KAAC,gBAAD,EAAkB,KAAK,CAAC,eAAxB,EADM,cAGN,KAAC,aAAD,EAAe,SAAS,CAAEF,SAA1B,CAAqC,IAAI,CAAEI,IAA3C,EAJJ,EADF,EADF,CAWD,CAtCD,CAwCA,cAAeV,CAAAA,MAAf","sourcesContent":["import { CircularProgress } from \"@material-ui/core\";\r\nimport { React, useEffect, useState } from \"react\";\r\nimport { MovieGridView } from \"../../components/MoviesPage\";\r\nimport \"./styles.css\";\r\n\r\nconst Movies = (props) => {\r\n  const { filter } = props.history.location.state;\r\n  const [movieList, setMovieList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  let type = filter;\r\n  if (type === \"comingsoon\") {\r\n    type = \"coming soon\";\r\n  } else if (type.includes(\"search/\")) {\r\n    type = `results for \"${type.substring(7)}\":`;\r\n  }\r\n\r\n  useEffect(async () => {\r\n    setLoading(true);\r\n    await fetch(`/${filter}`)\r\n      .then((response) => response.json())\r\n      .then(({ results }) => {\r\n        setMovieList(results);\r\n      });\r\n    let id = setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n    return () => {\r\n      clearTimeout(id);\r\n    };\r\n  }, [filter]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"movie-page-container\">\r\n        {loading ? (\r\n          <CircularProgress class=\"progress-icon\" />\r\n        ) : (\r\n          <MovieGridView movieList={movieList} type={type} />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"]},"metadata":{},"sourceType":"module"}